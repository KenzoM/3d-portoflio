/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef, useEffect, useCallback } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";
import islandScene from "@/assets/3d/island.glb";
import * as THREE from "three";

interface IslandProps {
  position?: THREE.Vector3;
  rotation?: number[];
  scale?: THREE.Vector3;
  isRotating: boolean;
  setIsRotating: (isRotating: boolean) => void;
  setCurrentStage: (number: number | null) => void;
}

export function Island({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}: IslandProps) {
  const isLandRef = useRef<THREE.Group>(null);

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(islandScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = useCallback(
    (e: PointerEvent | TouchEvent) => {
      e.stopPropagation();
      e.preventDefault();
      setIsRotating(true);

      const clientX = (e as TouchEvent)?.touches
        ? (e as TouchEvent).touches[0].clientX
        : (e as PointerEvent).clientX;

      lastX.current = clientX;
    },
    [setIsRotating]
  );

  const handlePointerUp = useCallback(
    (e: PointerEvent | TouchEvent) => {
      e.stopPropagation();
      e.preventDefault();
      setIsRotating(false);
    },
    [setIsRotating]
  );
  ``;
  const handlePointerMove = useCallback(
    (e: PointerEvent | TouchEvent) => {
      e.stopPropagation();
      e.preventDefault();

      if (isRotating && isLandRef.current) {
        const clientX = (e as TouchEvent)?.touches
          ? (e as TouchEvent).touches[0].clientX
          : (e as PointerEvent).clientX;

        const delta = (clientX - lastX.current) / viewport.width;

        isLandRef.current.rotation.y += delta * 0.01 * Math.PI;

        lastX.current = clientX;
        rotationSpeed.current = delta * 0.01 * Math.PI;
      }
    },
    [isRotating, viewport.width]
  );

  const handleKeyDown = useCallback(
    (e: KeyboardEvent) => {
      if (isLandRef.current) {
        if (e.key === "ArrowLeft") {
          if (!isRotating) setIsRotating(true);
          isLandRef.current.rotation.y += 0.01 * Math.PI;
        } else if (e.key === "ArrowRight") {
          if (!isRotating) setIsRotating(true);
          isLandRef.current.rotation.y -= 0.01 * Math.PI;
        }
      }
    },
    [isRotating, setIsRotating]
  );

  const handleKeyUp = useCallback(
    (e: KeyboardEvent) => {
      if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
        setIsRotating(false);
      }
    },
    [setIsRotating]
  );

  useFrame(() => {
    if (isLandRef.current) {
      if (!isRotating) {
        rotationSpeed.current *= dampingFactor;

        if (Math.abs(rotationSpeed.current) < 0.001) {
          rotationSpeed.current = 0;
        }

        isLandRef.current.rotation.y += rotationSpeed.current;
      } else {
        const rotation = isLandRef.current.rotation.y;
        const numStages = 4;
        const rotationRangePerStage = (2 * Math.PI) / numStages;
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

        // Calculate the start and end of each stage's range
        for (let i = 1; i <= numStages; i++) {
          const start = i * rotationRangePerStage;
          const end = (i + 1) * rotationRangePerStage;

          // Check if the normalized rotation falls within this stage's range
          if (normalizedRotation >= start && normalizedRotation < end) {
            setCurrentStage(i);
            break;
          }
        }
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [
    gl,
    handlePointerDown,
    handlePointerUp,
    handlePointerMove,
    handleKeyDown,
    handleKeyUp,
  ]);
  return (
    // @ts-ignore
    <a.group {...props} ref={isLandRef}>
      <mesh
        geometry={(nodes.polySurface944_tree_body_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface945_tree1_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface946_tree2_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface947_tree1_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface948_tree_body_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface949_tree_body_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.pCube11_rocks1_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}
